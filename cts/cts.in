#!@BASH_PATH@
#
# Copyright 2012-2025 the Pacemaker project contributors
#
# The version control history for this file may have further details.
#
# This source code is licensed under the GNU General Public License version 2
# or later (GPLv2+) WITHOUT ANY WARRANTY.
#

cts_root=`dirname $0`

verbose=0

clean=0
run=0
boot=0

patterns="-e CTS:"

helpmsg=$(cat <<EOF
Usage: %s [options] {[CMDS]}

[--]help, -h            show help screen and exit
-c,-g CLUSTER_NAME      set the cluster name
-v                      increase verbosity
-e PATTERN              grep pattern to apply when 'summary' requested
[--]run                 request CTS run (passing remaining arguments through)
[--]boot, start         request CTS run (with --boot option)
[--]clean               request cleaning up after CTS run
EOF
)

while true; do
    case $1 in
        -h|--help|help)
            printf "${helpmsg}\n" "$0"
            exit
            ;;
        -c|-g)
            cluster_name=$2
            shift
            shift
            ;;
        -v)
            verbose=`expr $verbose + 1`
            shift
            ;;
        -e)
            patterns="$patterns -e `echo $2 | sed 's/ /\\\W/g'`"
            shift
            shift
            ;;
        --run|run)
            run=1
            shift
            break
            ;;
        --boot|boot|start)
            boot=1
            clean=1
            shift
            break
            ;;
        --clean|clean)
            clean=1
            shift
            ;;
        "")
            break
            ;;
        *)
            echo "Unknown argument: $1"
            exit 1
            ;;
    esac
done

# Add the location of this script
export PATH="$PATH:$cts_root"
which cluster-helper &>/dev/null
if [ $? != 0 ]; then
    echo $0 needs the cluster-helper script to be in your path
    exit 1
fi

which cluster-clean &>/dev/null
if [ $? != 0 ]; then
    echo $0 needs the cluster-clean script to be in your path
    exit 1
fi

if [ "x$cluster_name" = x ] ; then
    clusters=`ls -1 ~/.dsh/group/[a-z]+[0-9] | sed s/.*group.// | tr '\n' ' ' `

    echo "custom) interactively define a cluster"
    for i in $clusters; do
        echo "$i) `cluster-helper --list short -g $i`"
    done

    read -p "Choose a cluster [custom]: " cluster_name
    echo
fi

if [ -z $cluster_name ]; then
    cluster_name=custom
fi


case $cluster_name in
    custom)
        read -p "Cluster name: " cluster_name
        read -p "Cluster hosts: " cluster_hosts
        read -p "Cluster log file: " cluster_log
        cluster-helper add -g "$cluster_name" -w "$cluster_hosts"
        ;;
    *)
        cluster_hosts=`cluster-helper --list short -g $cluster_name`
        cluster_log=~/cluster-$cluster_name.log
        ;;
esac

if [ $run = 1 ]; then
    clean=1
fi

if [ $clean = 1 ]; then
    rm -f $cluster_log
    cluster-clean -g $cluster_name --kill
fi

if [ $boot = 1 ]; then
    $cts_root/cts-lab -r -c -g $cluster_name --boot
    rc=$?
    if [ $rc = 0 ]; then
        echo "The cluster is ready..."
    fi
    exit $rc

elif [ $run = 1 ]; then
    $cts_root/cts-lab -r -c -g $cluster_name 500 "$@"
    exit $?

elif [ $clean = 1 ]; then
    exit 0
fi

# vim: set filetype=sh:
